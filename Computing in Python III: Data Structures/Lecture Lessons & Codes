Data Structures: Approaches to organizing abstract data types, such that the data can be accessed efficiently.

"Under the hood", everything in computing boils down to 1s and 0s. So, everything is built out of the absolute most basic data types imaginable! The complex behavior we see from the computers we use every day comes because computers know how to interpret 1s and 0s in different ways. A certain combination of 1s and 0s can be interpreted as the letter A or the number 7.

Working with the 1s and 0s directly is extremely difficult, so that's why you and I instead build on a layer that goes ahead and takes care of interpreting 1s and 0s as more complex types. However, dealing with just letters and numbers is still really difficult if we're building complex applications, so in this unit, we'll discuss how we can build and use more complex data types. These data types are still just letters and numbers, but they're organized and accessed in ways that make programming easier.

List-Like Structures: Also referred to as sequences and collections, a data structure that holds multiple individual values gathered together under one variable name, accessed via indices. This includes structures like lists, arrays, and tuples. Lists are simultaneously a general type of data structure and a specific data type in some languages.

Index: A number used to access a particular element from a list-like data structure. Traditionally, most programming languages assign the first item of a list-like data structure the index 0.

String: A data structure that holds a list, or a string, of characters.

Lists: A data structure that holds multiple individual values gathered together under one variable name, accessed via indices. Similar to arrays and tuples.

File Input and Output: The complementary processes of saving data to a file and loading data from a file, generally such that the state of the memory of the program is the same after saving and loading have occurred.

Dictionaries: A data structure comprised of key-value pairs, where a key is entered into the dictionary to get out a value. Similar to or synonymous with Maps, Associative Arrays, HashMaps, and Hashtables.

Passing by Value vs. Passing by Reference

Passing by Value
An approach for passing arguments into a function where the function is not able to modify the variable whose value was getting passed, only its local parameter that accepts the argument.

Passing by Reference
An approach for passing arguments into a function where the function is able to modify the variable whose value was getting passed, changing it for both the function and the code that called the function.

Reference
An alias to a variable that already exists. Either the reference or the variable name can be used to access the value stored in that variable.

That cryptic identifier is called a reference (or a memory address). It tells you where the variable itself can actually be found. When we pass by value, we grab the variable name (File A), 
find its reference (E1559), use the reference to find the value (5), and then tell the function the value (“Hey Addison, 5 and...”). The function never knows where the value came from.
When we pass by reference, we grab the variable name (File A), find its refer- ence (E1559), and pass that reference directly to the function (“Hey Addison, the value stored at E1559 and...”). 
The function then looks up the value on its own, but because it knows the reference, it can change the value if it wants to. It doesn’t have to, but it can.


Passing by Value and Reference in Python

Python deals with passing-by-value and passing-by-reference a little strangely. In reality, everything is passed by reference, but because of some details we'll cover next lesson, it often appears to be passing by value.

integer
ex)
def addOne(integer):
    integer = integer + 1
    print("integer ", integer)
i = 1
print("Before adding one ", i)
addOne(i)
print("After adding one ", i)

-> seems Pass by value

string
ex)
def addC(astring):
    astring = astring + "!"
    print("string ", astring)
s = "abc"
print("Before adding ", i)
addC(s)
print("After adding ", i)

-> seems Pass by value
  
