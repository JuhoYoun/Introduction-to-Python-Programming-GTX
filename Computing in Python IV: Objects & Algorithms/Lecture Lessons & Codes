Object-oriented programming: A programming paradigm where programmers define custom data types that have custom methods embedded within them.



Object: An object is a custom data structure that organizes and encapsulates variables and methods into a single data type. It is used near-interchangeably with “instance.”

Class: A custom data type comprised of multiple variables and/or methods. Instances or objects are created based on the template provided by the class.

Note that because the term 'object' is often used to refer both to actual data structures and to the general paradigm of object-oriented programming, we'll typically stick to the terms 'class' and 'instance' instead.

Instance: A single set of values of a particular class. Classes may be comprised of multiple variables; an instance is a set of values for these variables. The term “instance” is often used interchangeably with the term “object”.

In terms of vocabulary, the term 'object' is often overloaded (including in the title of some of our sections and videos). Sometimes people use it to refer to classes, sometimes people use it to refer to instances. Technically, an 'object' is more synonymous with an 'instance', but the use of the word 'object' in the term 'object-oriented programming' leads people to misuse the term.


Declarning a Class

Method
A function defined inside of a class.

Self
A keyword in Python classes that is used to refer to the instance itself. It defines the scope of variables and methods that methods in the class can see.

__init__ is called when we first create a new instance of this class.

If we leave off self, the variable has the same scope as a variable nor- mally would in a function: it stops existing when the function is over. So, writing self.firstname says, “Any time we look at this instance’s firstname, it should be the same one!” Every method declared inside a class should have self as the first parameter, and every variable for the class should be preceded by self every time the variable is used inside the class. self is a little like saying ‘my’; it collects together the class’s variables.

Encapsulation
The ability to combine variables and methods into class definitions in object-oriented programming. It helps avoid modification or misuse of data by other functions or programs.

Constructor
A common type of method in writing classes that specifies some code to run whenever
a new instance of the class is created. The constructor often has parameters that provide values to initialize the variables defined by the class.

Destructor
A common type of method in writing classes that specifies how the instance of a class is to be destroyed, such as releasing its memory back to the computer.

Getter
A common type of method in writing classes that returns the value of a variable contained within the class. They are commonly used to allow other processing to occur whenever the variable is accessed, like logging.

Setter
A common type of method in writing classes that sets a variable contained within the class to a new value. They are commonly used
to allow other processing to occur whenever the variable is changed, like logging.

Why do we need to do these through methods, though? Can’t we just access these variables directly? Many times, it’s best to design our code such that the variables inside it cannot be modified directly.
-> Use Getter and Setter 

On line 4, __init__ is Python’s convention for identifying constructors. Whenever a new instance of a class is created, Python goes and searches for the class’s __init__ method and runs it if it exists. If it doesn’t exist, that’s alright; Python just creates the instance without running any initial code.

Destructors do exist in Python, but because Python does so much memory man- agement on its own, you likely won’t need to use them until you get to much more advanced programs.

Interestingly as well, Python does not provide privacy options for its variables and methods. There is no way to bindingly mark a variable or method in a Python class as private, meaning that other code can always access variables directly.

Generally, when you’re developing classes in Python, it’s alright to directly access variables. That’s a major taboo in some languages (like Java), but it’s accepted in Python.
That said, getters and setters have other purposes as well. Recall that part of the benefit of getters and setters was that they allow us to run some code whenever a variable is accessed or modified. That might be useful in a simple logging behavior, for example. 

 Abstraction
A principle of object-oriented programming that states that only essential information should be made visible to the outside program.

Polymorphism
The principle that a method call can behave differently depending on the arguments and object with which it is called.

 Inheritance
A principle of object-oriented programming where classes can be created that are “subclasses” of other classes, inheriting all the variables and methods from the other class while supplying new variables, methods, or behaviors of these own.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

 Complexity
The rate at which the number of operations requires to run an algorithm grows based on the value of the input on which it operates.

 Big O Notation
A notation for expressing the worst-case efficiency of an algorithm in terms of the size of the input.

그냥 책 읽자

Sorting, Search Big O 는 그냥 검색하자


