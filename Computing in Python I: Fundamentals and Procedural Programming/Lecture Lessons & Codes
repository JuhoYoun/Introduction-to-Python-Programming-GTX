Chapter 1 -> read textbook!
Chapter 2.1 -> read textbook

-------------------------------------------------------------------------------------------------------------------------------

Running IDLE

As part of installing Python, you just installed something called IDLE: Integrated DeveLopment Environment. So, search for IDLE on your computer and run it. In Windows, that will look something like this:


IDLE comes up when searching for IDLE, or you can find it in the Python 3 folder of your Start Menu.

If you're on a Mac, it will look similar, but use Mac's search tool.


Using IDLE: Immediate Mode

Initially when running IDLE, you'll see something like this:


The default IDLE window.

This version of Python works like a complex calculator. Any lines of code you learn in this course can be typed directly into this prompt and executed one by one. For example:


Some simple code in the IDLE window.

Here, we're using Python exactly like a calculator for some simple variable-based math. This can be a powerful tool just for trying out little things. If you're wondering, "I wonder why Python does if I true to divide by zero?", you could try it:


The Python output from trying to divide 1 by 0.

And now you know! Let's try something else in this window real quick.


Using IDLE: Scripting Mode

While that's useful for little tests, it's not so useful for writing longer chunks of code and testing them. For that, we want to use IDLE's editor window.

In IDLE, click File, then New File (or hit Ctrl+N on PC, or Cmd+N on Mac). You'll get a new window that looks like this:


An empty IDLE editor window.

This is an empty code file. Now, type in print("Hello world") into this file. While you type, you'll see some helper text come up: this is meant to tell you the options available for the code you're writing, but for now, you're probably best off ignoring it.


Writing code in the editor with a tooltip visible.

When you're done, go to the Run menu and select Run Module:


The Run menu.

You'll be prompted to save the file. You can save it anywhere and name it anything. Afterward, look back at your main IDLE window. You'll see this:


The results of running Hello World.

The program runs, and the output is shown.

This is a simple demonstration with powerful implications: using this, you can write Python scripts that run on your own computer, work on your own files, and can be shared just like documents or images. Anything you write in this course can be copied into this kind of window and saved. You're also welcome to use IDLE for testing your code more efficiently: if you're rapidly revising and retesting some code, it can definitely be more efficient to use IDLE than wait for Vocareum in the browser.


IDLE and input()

Another big benefit of running Python and IDLE locally is that you can make use of the input() function. The input() function lets you write scripts that require the person running them to input data directly.

For example, copy this code into the editor window:
user_input = input("Enter some text: ")
print("You entered:", user_input)

It should look like this:


A test of using input().

If you run this using Run > Run Module, you'll see this:


Running the code above.

The blinking cursor indicates that the script is waiting on you to enter some value. Once you enter something, the rest of the script will run:


The result of entering some user input.

What you entered into the prompt is then used by the program. Because our Vocareum exercises require your entire script to run at once, it can't wait on user input like this, and thus we generally can't use the input() function. In IDLE on your own computer, though, you can.

Let's try one last exercise to test this out.
------------------------------------------------------------------------------------------------------------------------------------------
*By default, print() adds a line break to the end of the printed text.
*Python has no special way of creating multi-line comments.

------------------------------------------------------------------------------------------------------------------------------------------
Scripting Languages vs Compiled Languages (강의에는 있었나? 걍 궁금해서 검색함)
Dynamic Language vs Static Languages (그냥 궁금함)
Interpreted vs Compiled (차이?)

-----------------------------------------------------------------------------------------------------------------------------------------

2.2 -> mostly read textbook

camelCase vs. using_underscores

In almost all programming languages, variables (as well as functions, methods, classes, and other stuff we'll learn about later) cannot have spaces in them. We can't declare a variable called a number.

What do we do, then, when we want to create a variable whose name really should be more than one word? There are two common conventions: camel case and underscores.

    Camel case mushes the words together and capitalizes each word, like this: thisIsMyVariableName.
    Underscores just replaces spaces with underscores, usually keeping the variable name in all-lower case, like this: this_is_my_variable_name.

Which should you use? Each programming language has its own accepted style. In Python, you should use underscores. In Java and C#, you would use camel case. Other languages have their own conventions.

"But wait!" you say, "You're using camel case in the videos!" That's right! I learned to program first in C++, and then in Java, and then in C#, three languages that use camel case instead of underscores. Old habits are hard to break!

--------------------------------------------------------------------------------------------------------------------------------------------
2.2 

In most programming languages, the variable receiving the value is always on the left of the assignment operator (usually an equals sign), and the value itself is always on the right.

Some languages use arrows instead of equals, like this:

num_cats<-2

That makes it even more apparent that the value is going into the variable.
---------------------------------------------------------------------------------------------------------------------------------------------------
2.2

* Null: The “value” a variable has when it doesn’t actually have a value.
* In python, use None to assign a Null value to a variable
* sum = print(5 + 3) -> print(), however, is a function, and it doesn't result in any output, so after this line of code runs, sum will have a value of None.
* We use the word "assign" synonymously with "give". To assign a value to a variable is to give a value to a variable.

---------------------------------------------------------------------------------------------------------------------------------------------------

In other languages, called strongly-typed languages, assigning a type to a variable is actually a separate step from assigning a value to the variable. In Java, for example, whenever creating a variable, we give it a type, with a line like:

int x = 5;

Notice the line is similar to what we have in Python, except it starts with the word 'int'. This tells the computer that x will be an integer. If we then try to assign a different type to x, the code will crash. So, while variables in Python can change types based on what value is assigned to them, variables in Java have to be given a type explicitly.

Java also ends every line with a semi-colon, which is a more trivial difference.

----------------------------------------------------------------------------------------------------------------------------------
Most other languages have additional primitive data types. For example, most languages have a char data type that represents a single character, but in Python, this is instead simply represented by strings with only one character.

------------------------------------------------------------------------------------------------------------------------------------
Note that if you learn a language like C or Java, the term ‘primitive’ for data types will take on a stricter meaning. In the technical sense, Python does not have ‘primitive’ data types in the way these other languages do, but the data types we describe here are often used in the same way as primitives in other languages.

------------------------------------------------------------------------------------------------------------------------------------

So far, we've focused on Python's "primitive" types: booleans (True or False), integers (e.g. 7), floats (e.g. -5.75), and strings (e.g. "Hello!"). Almost everything that you work with can be broken down into these four types. A calendar date, for example, is three integers: one for year, one for month, and one for day.

There is, however, a fifth basic type in Python, but it's weird. The type is NoneType, and it only ever has one value: None.

What is None?

None is Python's implementation of the programming concept of null. This is how Python represents that a variable has no value. This is slightly different from a variable simply not existing: the variable name exists, it just doesn't point to any value. Because there is no value, it also doesn't fit into any of the above types: nothingness isn't a boolean, an integer, a float, or a string. It's just... nothing. So, Python has a special type, called NoneType, which only ever can have one value, None.


Where Does None Come From?

I mentioned above that None comes when a variable name exists, but it has no value. You might wonder: how can that happen? After all, in Python, the way we create a variable is to assign it a value:
a = 0

We create the variable a specifically by assigning it a value. How can we create a variable with no value?

There are two ways. First, the trivial way, we could just do that intentionally:
b = None

None is just like True, 7, -5.75, or "Hello" -- we can just assign variables to it, and then there value will be None. Chances are, though, you're not going to do that by accident.

The way it will happen more commonly is that you'll set it equal to some operation that doesn't result in anything. Let's try this out.

d = print(c)

That does two things: it prints c, and it sets d to the result of printing c. So, we see "Helloworld" printed because it printed c.

What about d though? You might be tempted to think that d should now have the value "Helloworld", too. Isn't "Helloworld" the result of print(c)? Not exactly: the result of print(c) was "Helloworld" being printed to the console. It did something rather than just resolving to a value. So, there was no actual value for d to be assigned to. As a result, its value is None.

----------------------------------------------------------------------------------------------------------------------------------------------------

Type Conversion

* str(variable): Takes as input some variable and returns a string representation of the variable’s value. Every data type can be converted to some kind of string.
* When put some value in print() function, print() always convert it to str value (implicit conversion)
* print("abc" + 1) -> 이 경우는 type error 가 나오고 print()는 1을 str 으로 변환하지 않는다
* print("abc", 1) -> abc 1 출력 -> 콤마로 나눠진 값들을 따로 type convrsion 한다 그리고 출력시 값들 사이에 스페이스도 자동으로 추가된다
* int(variable): Takes as input some variable (usually a string) and attempts to convert it to an integer, returning the integer if successful or raising a ValueError if unsuccessful. This function will work if variable is a string made up only of digits and, optionally, the negative sign.
* bool(variable): Takes as input some variable (usually a string) and attempts to convert it to a boolean, returning the boolean value if successful or raising a ValueError if unsuccessful. Generally, this function returns False if variable is 0 or an empty string, True if variable is anything else.
* float(variable): Takes as input some variable (usually a string) and attempts to convert it to a float, returning the float if successful or raising a ValueError if unsuccessful. This function will work if variable is a string made up only of digits and, optionally, a negative sign and a decimal point.

---------------------------------------------------------------------------------------------------------------------------------------------

Reserved Keywords

Here are the reserved words and where they'll be covered in our material:

    Importing Libraries. import, from. Not covered explicitly, but you'll see these in a few places throughout our material, especially when we're dealing with dates, turtles, or random numbers.
    Logical Operators. and, is, not, or, False, True, None. Covered in Chapter 2.3.
    Control Structures. as, break, continue, if, elif, else, for, in, while, pass, with. Covered throughout Unit 3. if, elif, and else are covered in 3.2; for, while, pass, continue, and break are covered in 3.3. as and with are not covered explicitly. in comes up in Chapters 2.3, 3.2, 3.3, and other places.
    Functions. def, return. Covered in Chapter 3.4.
    Object-Oriented Programming Syntax. class. Covered in Chapter 5.1.
    Error Handling. except, finally, raise, try. Covered in Chapter 3.5. else also comes up here.

----------------------------------------------------------------------------------------------------------------------------------------------------------
For example, in Python, we can do this:
my_var = 5
my_var = "Hello, world!"

But in Java, we cannot do this:
int my_var = 5;
my_var = "Hello, world!";
----------------------------------------------------------------------------------------------------------------------


Numeric Comparison Operators: Operators that facilitate numeric comparison between values. Typically, these are 'greater than' (>), 'greater than or equal to' (>=), 'equal to' (==), 'less than' (<), and 'less than or equal to' (<=).

These operators can sometimes be used for comparisons that are not numeric, but that nonetheless have an underlying order:

    A string of characters is 'less' than another string if it comes earlier alphabetically. "Apple" would be 'less' than "Banana".
    A date is 'less' than another date if it comes earlier in time. January 1st, 2017 would be 'less' than January 15th, 2017.

Non-Numeric Equality Comparisons: Nearly any kind of data can compare for equality, even if it isn't numeric. We can't ask if an apple is greater than an orange, but we can ask if apples and oranges are 'equal', or the same thing.

In practice, sometimes this will compare values to see if the values of two variables are the same, and other times it will compare if two variables are pointing to the same data in memory. It could be that two variables have the same values, but those values are stored in separate places, and so the computer doesn't recognize them as equal. We'll get to that more in Chapters 3.4 and 4.1.
------------------------------------------------------------------------------------------------------------------------------------

Set Operators: Check to see if a value is a member of a set of multiple values. Most often this comes up in strings and lists.

With strings, we can check to see if a certain smaller string occurs inside a larger string. For example, "cde" is in the string "abcdefg", but "ijk" is not.

With lists, we can check to see if a certain item is on our list. For example, if we had a list containing "grapes", "apples", and "oranges", then "apples" would be in that set, but "papaya" would not.

Set Operators
Finally, the other major Python operator we’ll use very often is the in operator. The in operator checks to see if something is contained within a list of things. The in operator is somewhat unique to Python; most languages (like Java and C++) supply the same ability, but with a function or method rather than simply with an operator. Python just makes it a little easier.

For example, we can use the in operator to see if there’s a certain message contained within a longer message. In Figure 2.3.6, the first two print statements say True because “H” and “lo, w” are character sequences within myString. “oll” is “False” because it does not occur within myString. This is effectively like saying, “‘oll’ is in myString?” and having the computer reply, False!
We haven’t talked much yet about lists, but in is also very useful in lists. Line 1 in Figure 2.3.7 defines a list; we’ll talk more about lists in Unit 3, but for now, just know that this is a list with three strings: “and,” “or,” and “not.” Line 2 asks, “‘and’ is in that list?”, to which the computer replies, True! Line 3 asks, “‘else’ is in that list?”, to which the computer replies, False!

ex) print("abc" in myString)
ex) print(1 in intList)
---------------------------------------------------------------------------------------------------------------------

Boolean Operators: Operators like “and” and “or” that act on pairs of boolean (true or false) values, or that act on single boolean values, like “not”.
---------------------------------------------------------------------------------------------------------------------

it's True that "Grapes"
#comes before "apples" alphabetically: Python puts all
#upper-case letters before all lower-case letters.
